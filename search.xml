<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[oracle复习重点第一章]]></title>
    <url>%2F2018%2F08%2F13%2Foracle%E5%A4%8D%E4%B9%A0%E9%87%8D%E7%82%B9%E7%AC%AC%E4%B8%80%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[第一章1、基本概念（表空间、模式等）、默认的表空间、表空间与数据文件之间的关系，表空间与段、区和数据块之间的关系；逻辑存储结构包括数据块、区、段、表空间和模式对象。 数据块、区、段和表空间 数据块（database block） ：数据块是数据库读/写数据的最小储存单元，数据块的大小通常设置为os块大小的整数倍。常见大小为2k或者4k。 区（extent） ：由一组连续的数据块所组成的逻辑单位。 段（segment） ：由一个或多个不连续的区的集合，Oracle数据库包括数据段、索引段、临时段、回滚段等。 表空间（Tablespace）：由若干个段组成，它是最大的逻辑存储单元，Oracle数据库被划分为一个或多个称为表空间的逻辑结构。关系一个数据库从逻辑上说是由一个或多个表空间所组成，一个表空间由若干段组成，一个段是由若干区所组成，一个区是由一组连续的数据块组成，而一个数据块对应硬盘上的一个或多个物理块。 1234567891011graph TDA[数据库]--&gt;B(表空间)A[数据库]--&gt;C(表空间)A[数据库]--&gt;D(表空间)C[表空间]--&gt;E(段)C[表空间]--&gt;f(段)C[表空间]--&gt;g(段)E[段]--&gt;H(区)E[段]--&gt;I(区)H[区]--&gt;J(一连串的数据快)J[一连串的数据块]--&gt;K(对应硬盘上一个或多个物理块) Oracle数据库被划分为一个或多个称为表空间的逻辑结构，系统默认创建的表空间包括： （1）EXAMPLE表空间是示例表空间 （2）SYSTEM表空间是系统表空间 （3）SYSAUX表空间是辅助系统表空间 （4）TEMP表空间是临时表空间 （5）UNDOTBSI表空间是重做表空间。 （6）USERS表空间是用户表空间 Oracle的模式对象包括表、视图、序列、同义词、索引等 21个对象。用户使用的一系列的模式对象的集合称为用户的方案。表是数据库中存放用户数据的对象。它包含一组列描述当前实体的属性，每个列都有一个名字和若干个属性。 2、oracle的外部结构：数据文件、日志文件和控制文件；(掌握功能)1234graph TDA[物理存储结构哦]--&gt;B(数据文件)A[物理存储结构哦]--&gt;c(控制文件)A[物理存储结构哦]--&gt;d(日志文件) 物理存储结构是从物理存储的角度分析数据库的组成，也就是系统创建和使用的操作系统物理文件。 数据文件数据文件用于保存数据库中的全部数据。如表、数据和索引。数据文件一般以*.dbf命名。数据库、表空间和数据文件之间的关系如图所示：一个Oracle数据库是由一个或多个表空间构成的， Oracle数据库的每个表空间由一个或多个数据文件构成，这些文件由Oracle所在的操作系统管理 重做日志文件重做日志文件（Redo Log Files）用于记录数据库所做任何变更。这些变更被记录在联机重做日志文件（Online Redo Log File）中。当数据库中的数据遭到破坏时，可以用这些日志来恢复数据库。通常以*.log命名。重做日志文件记录对数据库的所有修改信息，用于故障恢复 重做日志文件写入过程 控制文件每一个Oracle数据库，都有相应的控制文件，它们是较小的二进制文件。用于记录数据库的物理结构。通常以*.ctl命名。它们包括： （1）Oracle数据库名称与建立时间； （2）数据文件与重置日志文件名称及其所在位置； （3）日志记录序列码（Log Sequence Number）。控制文件是记录数据库物理结构的二进制文件。二者的关系数据库实例 数据库实例是Oracle为了完成用户服务而启动的一系列的程序。 它包含系统全局区（SGA）和后台进程两部分。 1234graph LRa[oracle实例]--&gt;|分配|b(系统全局区SGA)a[oracle实例]--&gt;|启动|c(后台进程) 系统全局区1234graph TDa[SGA的内存结构]--&gt;b(数据高速缓冲区)a[SGA的内存结构]--&gt;c(共享池)a[SGA的内存结构]--&gt;d(重做速缓冲区) SGA是系统为实例分配的一组共享内存缓冲区，用于存放数据库系统信息。多个进程可以同时对SGA中的数据进行访问和相互通信。 数据高速缓冲区数据高速缓冲区存放着数据库最近使用过的数据块。当用户访问相同的数据时，可以直接在数据缓冲区中提取，而不必再到数据文件中读取。 获取和修改数据的时候大大地提高了性能 通过LRU算法管理可用空间共享池共享池相当于程序高速缓冲区。用来储存最近执行过的SQL语句和最近使用过的数据定义。它由库缓冲区和数据字典缓冲区组成。共享池使得用户可以共享已经编译解析过的程序代码，从而降低了重复执行相同代码的开销，提高数据库的性能。123graph TDa[共享缓冲区]--&gt;b[库缓冲区]a[共享缓冲区]--&gt;d[数据字典] 重做日志缓冲区对数据库进行修改的任何事务在记录到重做日志之前都必须首先放到重做日志缓冲区中。重做日志缓冲区是专为此开辟的一块内存区域，重做日志缓存中的内容将被LGWR后台进程随时写入重做日志文件。 记录实例做出的修改 是循环缓冲区后台进程数据库的物理结构和内存结构之间的关系是由后台进程来维持的。 进程名 功能 日志写进程LGWR 将重做日志记录写到联机日志文件 数据库写进程DBWR 将修改过的数据库写回到数据文件 系统监控进程SMON 对有故障的实例进行恢复 进程监控进程PMON 清理异常终止的进程所占用的资源 检查点进程CKPT 定期检查数据库 归档进程ARCH 将已写满的联机日志文件复制到归档日志文件 Oracle的体系结构示意图 其他概念—进程结构 用户进程 : 当用户要求连接到 Oracle 服务器时启动的一种进程。 服务器进程 : 直接和 Oracle 服务器交互的一段程序。它响应用户要 求，向服务器发起呼叫并返回结果给用户。 后台进程 : 用于维持数据库的物理结构和存储结构间的关系附加进程其他概念—程序全局区程序全局区（PGA）：是用户进程私有的内存区域，不能共享。PGA在用户进程连接到数据库后，在创建会话时被自动分配，当一个用户会话结束，PGA被释放。]]></content>
      <categories>
        <category>oracle</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[oracle复习重点第三章]]></title>
    <url>%2F2018%2F08%2F13%2Foralce%E5%A4%8D%E4%B9%A0%E9%87%8D%E7%82%B9%E7%AC%AC%E4%BA%8C%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[第三章 创建表的SQL命令（创建、修改和删除）； 数据操作的SQL命令：插入数据、修改数据、删除数据；大题 选择的话是细则创建表 12345678910CREATE TABLE XSB( 学号 char(6) NOT NULL PRIMARY KEY, 姓名 char(8) NOT NULL, 性别 char(2) DEFAULT &apos;男&apos; NOT NULL, 出生时间 date NOT NULL, 专业 char(12) NULL, 总学分 number(2) NULL, 备注 varchar2(200) NULL); SQL简介 数据定义语言（DDL）。DDL用于对数据库以及数据库中各种对象的结构进行创建、删除、修改等。其中数据库对象主要包括表、视图、索引、同义词、序列等。DDL包括的主要语句及功能如表所示 语 句 功 能 CREATE 创建数据库或数据库对象 ALTER 对数据库或数据库对象进行修改 DROP 删除数据库或数据库对象 数据操纵语言（DML）。DML用于操纵存储在数据库对象中的数据。包括查找、插入、修改和删除等操作。DML包括的主要语句及功能如表所示： 语 句 功 能 SELECT 从表或视图中检索数据 INSERT 将数据插入到表或视图中 UPDATE 修改表或视图中的数据 DELETE 从表或视图中删除数据 数据控制语言（DCL）。DCL用于安全管理，确定哪些用户可以查看或修改数据库中的数据。DCL包括的主要语句及功能如表所示： 语 句 功 能 GRANT 授予权限 REVOKE 收回权限 DENY 收回权限，并禁止从其他角色继承权限 事务控制语言（TCL）。事务是一个或多个SQL语句序列的组合。事务控制语言TCL用于维护交易过程中数据的一致性。TCL包括的主要语句及功能如表所示： 语 句 功 能 COMMIT 用于提交事务，对数据库做永久性修改 ROLLBACK 用于事务出错时回滚数据 SAVEPOINT 标记事务中的某个点以便将来可以回滚 修改表ADD子句：用于向表中增加一个新列，新列的定义和创建表时定义列的格式一样，一次可添加多个列，中间用逗号隔开。 1234在表XS_JSJ中增加两列：奖学金等级、等级说明。ALTER TABLE XS_JSJ ADD (奖学金等级 number(1), 等级说明 varchar2(40) DEFAULT &apos;奖金1000元&apos;); 123为XS_JSJ表添加主键。ALTER TABLE XS_JSJ ADD (CONSTRAINT &quot;PK_JSJ&quot; PRIMARY KEY(学号) ); MODIFY子句：用于修改表中某列的属性（数据类型、默认值等）。在修改数据类型时需要注意，如果表中该列所存数据的类型与将要修改的列类型冲突，则会发生错误。 123在XS_JSJ表中修改“等级说明”列的默认值。ALTER TABLE XS_JSJ MODIFY (等级说明 DEFAULT &apos;奖金800元&apos; ); DROP子句：该子句用于从表中删除指定的字段或约束，语法格式为：1234567DROP &#123; COLUMN &lt;列名&gt; ∣PRIMARY [KEY] ∣UNIQUE (&lt;列名&gt;,…n) ∣CONSTRAINT &lt;约束名&gt; ∣[ CASCADE ]&#125; 12345在表XS_JSJ中删除“奖学金等级”和“等级说明”列。ALTER TABLE XS_JSJ DROP COLUMN 奖学金等级;ALTER TABLE XS_JSJ DROP COLUMN 等级说明; 删除表语法格式：DROP TABLE [&lt;用户方案名&gt;.] &lt;表名&gt;例如要删除表XS_JSJ，使用如下语句： 1DROP TABLE XS_JSJ; 数据的操作命令INSERT语句：向指定的表中加入一行，由VALUES指定各列的值。 12INSERT INTO &lt;表名&gt;[(&lt;列名1&gt;,&lt;列名2&gt;,…n)] VALUES(&lt;列值1&gt;,&lt;列值2&gt;,…n) 插入的数据应与字段的数据类型相同。 数据的大小应在列的规定范围内，例如：不能将一个长度为80的字符串加入到长度为40的列中。 在values中列出的数据位置必须与被加入的列的排列位置相对应。 字符和日期型数据应包含在单引号中。 插入空值，不指定或insert into table value(null) 向XSCJ数据库的表XSB中插入如下的一行： 151114 周何骏 计算机 男 1998-09-25 90可以使用如下的SQL语句：I1234NSERT INTO XSB(学号, 姓名, 性别, 出生时间, 专业, 总学分) VALUES(&apos;151114&apos;, &apos;周何骏&apos;, &apos;男&apos;,TO_DATE(&apos;19980925&apos;,&apos;YYYYMMDD&apos;), &apos;计算机&apos;, 90);或者：INSERT INTO XSB VALUES(&apos;151114&apos;, &apos;周何骏&apos;, &apos;男&apos;, &apos;1998-09-25&apos;, &apos;计算机&apos;, 90, NULL); 然后再运行COMMIT命令（用于提交修改过的数据，以保证数据保存到数据库中）COMMIT; 使用 update语句修改表中数据 123UPDATE &lt;表名&gt; SET &lt;列名&gt;=&#123;&lt;新值&gt;|&lt;表达式&gt;&#125; [,…n] [WHERE &lt;条件表达式&gt;] UPDATE语法可以用新值更新原有表行中的各列。 SET子句指示要修改哪些列和要给予哪些值。 WHERE子句指定应更新哪些行。如没有WHERE子句，则更新所有的行。 将XSCJ数据库的XSB表中学号为“151114”的学生备注列值置为“辅修计算机专业”，使用如下SQL语句： 123UPDATE XSB SET 备注=&apos;辅修计算机专业&apos; WHERE 学号=&apos;151114&apos;; 将a表中的所有学生的ZXF（总学分）都增加5。 12UPDATE a SET ZXF = ZXF + 5;]]></content>
      <categories>
        <category>oracle</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[oracle复习重点第四章]]></title>
    <url>%2F2018%2F08%2F13%2Foracle%E5%A4%8D%E4%B9%A0%E9%87%8D%E7%82%B9%E7%AC%AC%E5%9B%9B%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[第四章 SELECT语句（包括SELECT、FROM等子句）； 连接查询（包括内连接和外连接，外连接又分为左外连接、右外连接和完全外连接）； 子查询； 分组函数，group by子句，having子句，排序 视图创建，注意一些选项：froce、with read only和with check option 可更新视图的概念 了解替换变量：&amp;，&amp;&amp; 选择和投影的区别选择：单目运算，其运算对象是一个表。该运算按给定的条件，从表中选出满足条件的行形成一个新表作为运算结果。投影：单目运算，该运算从表中选出指定的列组成一个新表。 连接 连接：把两个表中的行按着给定的条件（=、&gt;、&lt;、&gt;=、&lt;=、!=）拼接而形成的新表。 等值连接：如果连接两个表的条件是要求某些列值相等，则称该连接为等值连接。（属性名可以不同，但是要求列值相同） 自然连接：两个关系具有相同属性时(属性名和列值都相同)，进行的等值连接，并且去掉重复的属性. 等值连接与自然连接的区别： 1. 等值连接中不要求列名相同，只要列值相同即可。而自然连接要求列名和列值都要相同，才能进行自然连接。 2. 等值连接不去除重复列，而自然连接要求去掉重复列，也可以说，自然连接是去掉重复列的等值连接。 查询SQL查询语句的步骤： 编译：服务器进程在共享池中搜索是否有相同的SQL语句；检查SQL语句的语法；处理之后，或返回错误，或将SQL语句和执行计划装入共享的SQL区 执行：SQL语句获取执行所需的所有资源和信息，服务器进程执行SQL语句 提取数据：服务器进程选择所需的数据行，并在需要时进行排序，最后将结果返回给用户进程 SQL的SELECT语句可以实现对表的选择、投影及连接操作，其功能十分强大。SELECT语句比较复杂，其主要的子句语法格式如下： 123456SELECT &lt;列&gt; /*指定要选择的列及其限定*/ FROM &lt;表或视图&gt; /*FROM子句，指定表或视图*/ [ WHERE &lt;条件表达式&gt; ] /*WHERE子句，指定查询条件*/ [ GROUP BY &lt;分组表达式&gt; ] /*GROUP BY子句，指定分组表达式*/ [ HAVING &lt;分组条件表达式&gt; ] /*HAVING子句，指定分组统计条件*/ [ ORDER BY &lt;排序表达式&gt; [ ASC | DESC ]] /*ORDER子句，指定排序表达式和顺序*/ 修改查询结果中的列标题可以在列名之后使用AS子句指定一个列别名来替代查询结果的列标题名。【例】 查询XSB表中计算机专业同学的学号、姓名和总学分，结果中各列的标题分别指定为num、name和score。 1234567SELECT 学号 AS num, 姓名 AS name, 总学分 AS score FROM XSB WHERE 专业= &apos;计算机&apos;;也可以省略AS关键字，写成：SELECT 学号 num, 姓名 name, 总学分 score FROM XSB WHERE 专业=&apos;计算机&apos;; 消除结果集中的重复行可以使用DISTINCT关键字消除结果集中的重复行，其格式是： 1SELECT [ ALL | DISTINCT ] &lt;列名&gt; [ , &lt;列名&gt;…] 关键字DISTINCT的含义是对结果集中的重复行只选择一个，保证行的唯一性。【例】 对XSCJ数据库的XSB表只选择专业和总学分，消除结果集中的重复行。 12SELECT DISTINCT 专业 AS 专业,总学分 AS 总学分 FROM XSB;]]></content>
      <categories>
        <category>oracle</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[pic test]]></title>
    <url>%2F2018%2F08%2F12%2Fpic-test%2F</url>
    <content type="text"><![CDATA[插个图片吧]]></content>
  </entry>
  <entry>
    <title><![CDATA[代码高亮展示]]></title>
    <url>%2F2018%2F08%2F12%2F%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E5%B1%95%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[这是一行普通的字 这是高亮部分 12345678910111213这是代码 $(&apos;pre code&apos;).each(function(i, block) &#123; //hljs.highlightBlock(block); var lines = $(this).text().split(&apos;\n&apos;).length - 1; var $numbering = $(&apos;&lt;ul/&gt;&apos;).addClass(&apos;pre-numbering&apos;); $(this) .addClass(&apos;has-numbering&apos;) .parent() .append($numbering); for(i=1;i&lt;=lines;i++)&#123; $numbering.append($(&apos;&lt;li/&gt;&apos;).text(i)); &#125; &#125;);]]></content>
  </entry>
  <entry>
    <title><![CDATA[如何利用优秀的hexo+github建立一个属于自己博客]]></title>
    <url>%2F2018%2F08%2F12%2F%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E4%BC%98%E7%A7%80%E7%9A%84hexo-github%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2(1)%2F</url>
    <content type="text"><![CDATA[内事不决问百度，外事不决问谷歌 1.环境搭建1.1下载git 地址link git是个啥？ 根据网上介绍git是一个最优秀的版本控制软件没有之一。 顾名思义，版本控制系统是任何能让你了解到一个文件的历史，以及它的发展过程的系统。 git在这里有啥子用呢？ 接下来大部分操作都会用到git命令服务窗口 包括安装hexo以及hexo的各种插件，将本地关联到github服务器，让hexo生成页面等等。 1.2下载node.js hexo是一款基于Node.js的静态博客框架，因此安装之前必须先安装Node.js 地址一路安装下去没什么好说的。 1.3安装hexo !]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F12%2Fhello%20java%2F</url>
    <content type="text"><![CDATA[分类测试]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F08%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[耗时三天十几个小时，踩过过无数个坑，博客终于千呼万唤出来了。今天太累了，明天会把基本的步骤写出来，做为供自己反思（zhuangbi）和他人学习。 万里长征的第一步，开始 加油!！！]]></content>
  </entry>
  <entry>
    <title><![CDATA[php categorie test]]></title>
    <url>%2F2018%2F08%2F12%2Fphp%20%E5%88%86%E7%B1%BB%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[test]]></content>
      <categories>
        <category>php</category>
      </categories>
  </entry>
</search>
